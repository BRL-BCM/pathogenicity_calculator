<%
  require 'cgi'
  require 'json'
  require 'brl/activeSupport/activeSupport'
  BRL::ActiveSupport.requireCoreExt("active_support/core_ext/string")
  require 'brl/genboree/genboreeUtil'
  require "brl/genboree/genboreeContext"
  require 'brl/genboree/kb/converters/nestedTabbedModelConverter'
  require 'brl/genboree/kb/producers/abstractTemplateProducer'
  
  BRL::ActiveSupport.requireCoreExt("active_support/core_ext/string")
  
  $stderr.debugPuts(__FILE__, __method__, "TMPDIR", "#{ENV['TMPDIR'].inspect}")
  
  req = Apache.request # needed for content-disposition & file sending
  cgi = CGI.new()
  context = BRL::Genboree::GenboreeContext.new(cgi, ENV)
  # Options
  #$stderr.debugPuts(__FILE__, __method__, "DEBUG", "cgi.params:\n\n#{JSON.pretty_generate(cgi.params)}\n\n")
  action = cgi.params['action'].first.downcase rescue 'view'
  action = 'view' unless(action == 'download') # any other options automatically become 'view'
  baseAssetDir = (action == 'view' ? '/clingenInference/V2.5/' : "file://#{context.genbConf.alleleRptAssetBaseDirV2_5}/")
  #$stderr.debugPuts(__FILE__, __method__, "DEBUG", "action: #{action.inspect} ; baseAssetDir: #{baseAssetDir.inspect}")
    
  # Load model
  modelFile = context.genbConf.alleleRptModelFileV2_5
  mconv = BRL::Genboree::KB::Converters::NestedTabbedModelConverter.new()
  model = File.open(modelFile) { |fh| mconv.parse(fh) }
  #$stderr.debugPuts(__FILE__, __method__, "DEBUG", "Parsed model file:\n\n#{model.inspect}\n\n")
  
  # Doc
  doc = cgi.params['data'].first rescue nil
  #$stderr.debugPuts(__FILE__, __method__, "DEBUG", "doc (class: #{doc.class}):\n\n#{doc.inspect}\n\n")
  if(doc)
    hashDoc = JSON.parse(doc) rescue nil
    if(hashDoc)
      kbDoc = BRL::Genboree::KB::KbDoc.new(hashDoc)
      # Producer
      begin
        tp = BRL::Genboree::KB::Producers::AbstractTemplateProducer.new(model, kbDoc, { :templateDir => context.genbConf.alleleRptTemplatesDirV2_5, :relaxedRootValidation => true })
        rptContent = tp.render(:alleleRpt)
      rescue => err
        if(err.is_a?(ArgumentError))
          rptContent = "<span class=\"broken\">Cannot display doc. #{err.message}</span>"
        else
          rptContent = "<span class=\"broken\">Error during report generation, likely a report-rendering bug. Please consult an administrator or project manager with help tracking down the cause. Technical info: #{err.message}. <br>#{err.backtrace}"
        end
        $stderr.debugPuts(__FILE__, __method__, "ERROR", "\n  Error class: #{err.class}\n  Error msg: #{err.message}\n  Key files: model: #{modelFile.inspect} ; cgi.paarms:\n\n#{JSON.pretty_generate(cgi.params)}\n\n  Error trace:\n#{err.backtrace.join("\n")}")
      end
    else
      rptContent = "<span class=\"broken\">Cannot display doc. The payload received from the Clingen Pathogenicity Calculator interface is imcompatible. Please consult an administrator or project manager with help tracking down and addressing the cause.</span>"
    end
  else
    rptContent = "<span class=\"broken\">Cannot display doc. The payload received from the Clingen Pathogenicity Calculator appears to be missing the required data. Please consult an administrator or project manager with help tracking down and addressing the cause.</span>"
  end
  
  # If you need some ERB tags even at the top-level html, then make a template that covers the whole thing.
  # For PDF generation, we need a static string in which the css file can be found WITHOUT HAVING TO LOGIN or ANYTHING
  html = <<-EOS
    <html>
    <head>
      <link href="#{baseAssetDir}style/alleleRpt.css?jsVer=#{context.genbConf.jsVer}" media="all" rel="stylesheet" type="text/css">
      <meta name="arj-sp" content="test"></meta>
    </head>
    <body>
      
      <!-- PAGE -->
      <div id="page">
      
        <!-- CONTENT -->
        #{rptContent}
      
      </div>
    </body>
    </html>
  EOS

  if(action == 'download')
    begin
      # tmpFile
      uniqName = doc.generateUniqueString
      htmlFileName = "#{ENV['TMPDIR']}/#{uniqName}.tempForPdf.html"
      File.open(htmlFileName, "w+") { |of| of << html }
      pdfFileName = "#{ENV['TMPDIR']}/#{uniqName}.tempForPdf.pdf"
      convertCmd = "wkhtmltopdf \"#{htmlFileName}\" \"#{pdfFileName}\" 2>&1"
      cmdOut = `#{convertCmd}`
      status = $?.dup
      $stderr.debugPuts(__FILE__, __method__, "DEBUG", "wkhtmltopdf command:\n    Cmd: #{convertCmd}\n    Exit code: #{status.exitstatus.inspect}\n    Stdout/stderr:\n\n#{cmdOut.inspect}\n\n")
      # Send file using apache
      filenameHdr = File.basename(kbDoc.getRootPropVal)
      File.open(pdfFileName) { |ff|
        req.headers_out['Content-Type'] = req.content_type = "application/octet-stream"
        req.headers_out["Content-Disposition"] = "attachment; filename=#{filenameHdr}.pdf"
        req.status = 200
        req.send_http_header
        #exit(Apache::OK) if(req.header_only?)
        req.send_fd(ff)
        $stderr.debugPuts(__FILE__, __method__, "DEBUG", "req:\n\n#{req.inspect}\n\n")
      }
    rescue Exception => err
      errMsg = "Converstion of report to PDF format failed. Please consult an administrator or project manager for help tracking down and addressing the cause."
      $stderr.debugPuts(__FILE__, __method__, "ERROR", "#{errMsg}.\n  Error Class: #{err.class}\n  Error Message: #{err.message}\n  Error Trace:\n#{err.backtrace.join("\n")}")
    ensure
      htmlDel = File.delete(htmlFileName) rescue false
      pdfDel = File.delete(pdfFileName) rescue false
    end
  else # must be a 'view' (in browser)
%>
    <%= html %>
<%
  end
%>
  
