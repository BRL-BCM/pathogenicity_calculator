<%#
THIS FILE USES eruby %>
<%
# ---------------------------------------------------------------------------
# SETUP CONVENIENT ENVIRONMENT
# ---------------------------------------------------------------------------
require "timeout"
require "stringio"
require "cgi"
require "json"
require "net/http"
require "uri"
require 'digest/sha1'
require "brl/util/util"
require "brl/genboree/genboreeUtil"
require 'brl/db/dbrc'
require "brl/genboree/genboreeContext"
require 'brl/genboree/rest/apiCaller'
require 'brl/genboree/abstract/resources/user'
BRL::Genboree::REST::ApiCaller.usageContext = :serverEmbedded

begin
  cgi = CGI.new()
  @req = Apache.request
  @serverName = cgi.host
  @serverName += ":#{cgi.server_port}" if(cgi.server_port != 80)
  @context = BRL::Genboree::GenboreeContext.new(cgi, ENV)
  self.extend(BRL::Genboree)
  @errorMsg = ""
  @genMsg = ""
  @user = ""
  @errorState = false
  isPublic = false
  #defaultGrp = "clingenInference", defaultKb = "Grid Prototype", defaultColl = "Gene-Variant Pairs"
  apiHost = ENV["HTTP_HOST"]
  inGbSession = true
  inGbSession = false if(@context.cgi["genbSession"].nil? or @context.cgi["genbSession"].empty?)
  hgvs = ( (@context.cgi["hgvs"].nil? or @context.cgi["hgvs"].empty?) ? nil : hgvs )
  register = ( (@context.cgi["reg"].nil? or @context.cgi["reg"].empty?) ? false : true )
  version = 'V2.5'
  alleleRptDownloadEnabled = @context.genbConf.alleleRptDownloadEnabled rescue nil
  unless(inGbSession)
    dbrc = BRL::DB::DBRC.new()
    userId = @context.cgi["userId"].strip
    @user = @context.cgi["userLogin"].strip
    #@hostAuthMap = dbrc.getHostAuthMap(apiHost, :CLINGEN_PUB_TOOL_USER )
    @hostAuthMap = {}
    isPublic = true
    # use the default configuration file for 
    dConf = "BRL#{version}"
  else
    userId = @context.cgi["userId"].strip
    @user = @context.cgi["userLogin"].strip
    @hostAuthMap = Abstraction::User.getHostAuthMapForUserId(nil, userId)
    dConf = CGI.escape(@user)
  end
    showgrids = (@context.cgi['showgrids'] =~ /\S/) ? @context.cgi['showgrids'].strip() : nil
    transfertoJs =  StringIO.new
    conf = (@context.cgi['conf'] =~ /\S/) ? @context.cgi['conf'].strip() : nil
    ca = (@context.cgi['ca'] =~ /\S/) ? @context.cgi['ca'].strip() : nil
    hgvs = (@context.cgi['hgvs'] =~ /\S/) ? @context.cgi['hgvs'].strip() : nil
    showgrids = (@context.cgi['showgrids'] =~ /\S/) ? @context.cgi['showgrids'].strip() : nil
    # get the json with all the grid configurations
    gridConfPath = @context.genbConf.gridConfV2_5
    customHeader = @context.genbConf.gridConfV2_1Header rescue nil
    customFooter = @context.genbConf.gridConfV2_1Footer rescue nil
    gbadminEmail = @context.genbConf.gbAdminEmail
    begin
      missing = []
      # use the conf if present
      if(conf) # get the custom conf
        apiCaller = BRL::Genboree::REST::ApiCaller.new(apiHost, "#{gridConfPath}/#{conf}", @hostAuthMap)
        apiCaller.get()
        if(apiCaller.succeeded?)
          customConf = apiCaller.parseRespBody['data']
          cusProps = apiCaller.parseRespBody['data']['Configuration']['properties'] rescue nil
          caUrl = cusProps['CanonicalAllele']['value'] rescue nil
          caProject = cusProps['CanonicalAllele']['properties']['redmineProject']['value'] rescue nil
          evSourceUrl = cusProps['EvidenceSource']['value'] rescue nil
          conCacheUrl = cusProps['ConclusionCache']['value'] rescue nil
          evCacheUrl = cusProps['CA2EvidenceCache']['value'] rescue nil
          caSrcLinks = cusProps['CASourceLinks']['value'] rescue nil
          contAlleleUrl = cusProps['ContextualAllele']['value'] rescue nil
          geneSrcLinks = cusProps['GeneSourceLinks']['value'] rescue nil
          geneUrl = cusProps['Gene']['value'] rescue nil
          refseqUrl = cusProps['ReferenceSequence']['value'] rescue nil
          email = cusProps['Email']['value'] rescue nil
          regAddress = cusProps['RegistryAddress']['value'] rescue nil
        else
          @genMsg = "GRID CONFIGURATION FILE ERROR"
          @errorMsg += "API_FAILED. Failed to get the custom configuration file from #{gridConfPath}/#{conf}"
          @errorMsg += '<br><b>API STATUS: </b>'
          @errorMsg += apiCaller.parseRespBody['status']['statusCode']
          @errorMsg += '<br><b>DETAILS: </b>'
          @errorMsg += "#{apiCaller.parseRespBody['status']['msg']}"
          @errorMsg += '<br><b>CONTACT: </b>'
          @errorMsg += "Please contact the administrator to resolve the issue"
          @errorState = true
        end
      # if not a custom configuration, expecting to get a default configuration which will be named
      # and present at genbConfPath, after the userlogin, @user.
      # Note that this is BRL{version} for public version of the grid
      elsif(dConf)
        apiCaller = BRL::Genboree::REST::ApiCaller.new(apiHost, "#{gridConfPath}/#{dConf}", @hostAuthMap)
        apiCaller.get()
        if(apiCaller.succeeded?)
          defaultConf = apiCaller.parseRespBody['data']
          props = apiCaller.parseRespBody['data']['Configuration']['properties'] rescue nil
          caUrl = props['CanonicalAllele']['value'] rescue nil
          caProject = props['CanonicalAllele']['properties']['redmineProject']['value'] rescue nil
          evSourceUrl = props['EvidenceSource']['value'] rescue nil
          conCacheUrl = props['ConclusionCache']['value'] rescue nil
          contAlleleUrl = props['ContextualAllele']['value'] rescue nil
          evCacheUrl = props['CA2EvidenceCache']['value'] rescue nil
          geneUrl = props['Gene']['value'] rescue nil
          refseqUrl = props['ReferenceSequence']['value'] rescue nil
          email = props['Email']['value'] rescue nil
          caSrcLinks = props['CASourceLinks']['value'] rescue nil
          geneSrcLinks = props['GeneSourceLinks']['value'] rescue nil
          regAddress = props['RegistryAddress']['value'] rescue nil
        else
          @genMsg = "GRID CONFIGURATION FILE ERROR"
          @errorMsg += "API_FAILED. Failed to get the configuration file from #{gridConfPath}/#{dConf}"
          @errorMsg += '<br><b>API STATUS: </b>'
          @errorMsg += apiCaller.parseRespBody['status']['statusCode']
          @errorMsg += '<br><b>DETAILS: </b>'
          @errorMsg += "#{apiCaller.parseRespBody['status']['msg']}"
          @errorMsg += '<br><b>CONTACT: </b>'
          @errorMsg += "Please contact us at "+gbadminEmail+ " to resolve this issue."
          @errorState = true
          if(apiCaller.parseRespBody['status']['statusCode'] == 'Not Found' and isPublic == false)
            specialmessage = "<br><br> Please visit our  <a href=\"/java-bin/clingenPublic#{version}.jsp\">Public page</a> to browse through the Allele Registry and the Pathogenicity Calculator."
            @errorMsg += specialmessage
          end
        end
      end #conf. either a conf or dConf
      unless(@errorState)   
        missing << 'CanonicalAllele URL' unless(caUrl)
        missing << 'Evidence Source URL' unless(evSourceUrl)
        missing << 'Conclusion Cache URL' unless(conCacheUrl)
        missing << 'Canonical Allele Source Links URL' unless(caSrcLinks)
        missing << 'Gene Source Links' unless(geneSrcLinks)
        missing << 'Contextual Allele' unless(contAlleleUrl)
        missing << 'Registry Address' unless(regAddress)
        regResp = nil
        if(hgvs and register)
           dbrc = BRL::DB::DBRC.new()
           reguri = URI.parse(regAddress) 
           dbrcRec = dbrc.getRecordByHost(reguri.host, :allele_reg)
           url = "#{regAddress}/allele?"
           url += "hgvs=#{URI.escape(hgvs, /[;>=]/)}"
           identity = Digest::SHA1.hexdigest("#{dbrcRec[:user]}#{dbrcRec[:password]}")
           gbTime = Time.now.to_i.to_s
           token = Digest::SHA1.hexdigest("#{url}#{identity}#{gbTime}")
           request = "#{url}&gbLogin=#{dbrcRec[:user]}&gbTime=#{gbTime}&gbToken=#{token}"

           uri = URI(request)
           http = Net::HTTP.new(uri.host)
           http.read_timeout = 500 # seconds
           res = http.send_request('PUT', "#{uri.path}?#{uri.query}", "")
           regResp = JSON(res.body) rescue nil
        end 
        if(missing.empty?)
         transfertoJs << "var regResp = '#{regResp.to_json}';" if(regResp)
         transfertoJs << "var isPublic = '#{isPublic}';" if(isPublic) 
         transfertoJs << "var caProject = '#{CGI.escape(caProject.strip())}';" 
         transfertoJs << "var caUrl = '#{CGI.escape(caUrl.strip())}';" 
         transfertoJs << "var regAddress = '#{CGI.escape(regAddress.strip())}';" 
         transfertoJs << "var caSrcLinks = '#{CGI.escape(caSrcLinks.strip())}';" 
         transfertoJs << "var geneSrcLinks = '#{CGI.escape(geneSrcLinks.strip())}';" 
         transfertoJs << "var evSourceUrl = '#{CGI.escape(evSourceUrl.strip())}';" 
         transfertoJs << "var conCacheUrl = '#{CGI.escape(conCacheUrl.strip())}';" 
         transfertoJs << "var contAlleleUrl = '#{CGI.escape(contAlleleUrl.strip())}';" 
         transfertoJs << "var evCacheUrl = '#{CGI.escape(evCacheUrl.strip())}';" 
         transfertoJs << "var ca = '#{CGI.escape(ca.strip())}';" if(ca)
         transfertoJs << "var hgVS = '#{CGI.escape(hgvs.strip())}';" if(hgvs)
         transfertoJs << "var conf = '#{CGI.escape(conf.strip())}';" if(conf)
         transfertoJs << "var email = '#{CGI.escape(email.strip())}';" if(email)
         transfertoJs << "var geneUrl = '#{CGI.escape(geneUrl.strip())}';" if(geneUrl)
         transfertoJs << "var refseqUrl = '#{CGI.escape(refseqUrl.strip())}';" if(refseqUrl)
         transfertoJs << "var user = '#{CGI.escape(@user.strip())}';" if(@user)
         transfertoJs << "var showgrids = '#{showgrids}';" if(showgrids)
         transfertoJs << "var alleleRptDownloadEnabled = '#{alleleRptDownloadEnabled}';" if(alleleRptDownloadEnabled)
         transfertoJs << "var registerAllele = '#{register}';" if(register)
        else
          @genMsg = "MISSING CONFIGURATIONS"
          @errorMsg += "Cannot proceed with incomplete components for the grid. "
          @errorMsg += "Following configurations are missing from the configuration file"
          @errorMsg += '<br><ul>'
          missing.each{|missed|
            @errorMsg += '<li>'
            @errorMsg += missed
            @errorMsg += '</li>'
          }
          @errorMsg += '</ul>'
          @errorState = true
        
        end
      end
    rescue => aerr
      @genMsg = "ERROR"
      @errorMsg += "Failed getting all the parameters from the configuration - #{gridConfPath}"
      @errorMsg += '<br> DETAILS: <br>'
      @errorMsg += aerr
      @errorState = true
    end
   unless(@errorState)
 %>
  <!DOCTYPE html>
  <html>
    <head>
      <title>CLINGEN PATHOGENICITY CALCULATOR</title>
      <meta content="text/html;charset=utf-8" http-equiv="Content-Type">
      <meta content="utf-8" http-equiv="encoding">

      <link rel="stylesheet" type="text/css" href="/javaScripts/ext-4.2.1/resources/css/ext-all.css?jsVer=<%= @context.genbConf.jsVer %>"/>
      <link rel="stylesheet" type="text/css" href="/clingenInference/<%=version%>/style/gridPage.css?jsVer=<%= @context.genbConf.jsVer %>"/>
      <link rel="stylesheet" type="text/css" href="/clingenInference/<%=version%>/style/tableViews.css?jsVer=<%= @context.genbConf.jsVer %>"/>
      <link rel="stylesheet" type="text/css" href="/clingenInference/<%=version%>/style/font-awesome-4.6.3/css/font-awesome.min.css?jsVer=<%= @context.genbConf.jsVer %>"/>

      <script type="text/javascript" src="/javaScripts/ext-4.2.1/ext-all.js?jsVer=<%= @context.genbConf.jsVer %>"></script>
      <script type="text/javascript" src="/javaScripts/util.js?jsVer=<%= @context.genbConf.jsVer %>"></script>
      <%
      # use the appropriate js for public and private versions of the page
      if(isPublic)
      %>
        <script type="text/javascript" src="/clingenInference/<%=version%>/javaScripts/cellWindow.js?jsVer=<%= @context.genbConf.jsVer %>"></script>
      <%
      else
      %>
        <script type="text/javascript" src="/clingenInference/<%=version%>/javaScripts/cellWindowEdit.js?jsVer=<%= @context.genbConf.jsVer %>"></script>
      <%
      end
      %>
      <script type="text/javascript" src="/clingenInference/<%=version%>/javaScripts/entryPage.js?jsVer=<%= @context.genbConf.jsVer %>"></script>
      <script type="text/javascript" src="/clingenInference/<%=version%>/javaScripts/panels.js?jsVer=<%= @context.genbConf.jsVer %>"></script>
      <script type="text/javascript" src="/clingenInference/<%=version%>/javaScripts/advanceSearch.js?jsVer=<%= @context.genbConf.jsVer %>"></script>
      <script type="text/javascript" src="/clingenInference/<%=version%>/javaScripts/ajax.js?jsVer=<%= @context.genbConf.jsVer %>"></script>
      <script type="text/javascript" src="/clingenInference/<%=version%>/javaScripts/template.js?jsVer=<%= @context.genbConf.jsVer %>"></script>
      <script type="text/javascript" src="/clingenInference/<%=version%>/javaScripts/createEvidence.js?jsVer=<%= @context.genbConf.jsVer %>"></script>
      <script type="text/javascript" src="/clingenInference/<%=version%>/javaScripts/helper.js?jsVer=<%= @context.genbConf.jsVer %>"></script>
      <script type="text/javascript" src="/clingenInference/<%=version%>/javaScripts/tagAndLinks.js?jsVer=<%= @context.genbConf.jsVer %>"></script>
      <script type="text/javascript" src="/clingenInference/<%=version%>/javaScripts/forge.bundle.js?jsVer=<%= @context.genbConf.jsVer %>"></script>
          <div class="pageHeader">
          <%
          # Load the cusotm header only if the file mentioned in genboree.config.properties does exist
          if(File.exist?(customHeader))
          %>  
            <%= Erubis::Eruby.load_file(customHeader).result ; %>
          <% end %>
          </div>
          <div class="pageTitle">
            ClinGen Pathogenicity Calculator
          </div>
         <%
          if(isPublic)
         %>
           <div class="gb-logout-butt" onclick="javascript:showPublicWindow(); ">Public</div>
         <%
          else
         %>
           <div class="gb-logout-butt" onclick="javascript:window.location.href='/java-bin/login.jsp?rm=logout'; return false;">Logout</div>
         <%
          end
         %>
          <div class="container" id="panel"></div>
          <div class="pageHeader">
          <%
          # Load the cusotm footer only if the file mentioned in genboree.config.properties does exist
          if(File.exist?(customFooter))
          %>  
            <%= Erubis::Eruby.load_file(customFooter).result ; %>
          <% end %>
          </div>
       <script type="text/javascript" >
        // tags a global variable. freshly populated before each tab contents 
        // are activated. Require correct tags to add and save tabs from an edot window. 
        var alleleRptDownloadEnabled ;
        var tags = new Object() ;
        var tagExclusions = new Object() ;
        var alltagsinTable = new Object()
        var tagDefs = new Object() ;
        var tagExclusionsOfInterest = new Object() ;
        var regResp ;
        // color object for storing the colors of the cell. Used for highlighting 
        var parColor = new Object() ;
        var user;
        var uniquegrpUris = new Object();
        // canonical allele for the calculator page
        var ca ;
        var caalleletype ;
        // canonical allele subject
        var caSub;
        // show grids variable for filtering the grids from a URL
        var showgrids ;
        var topPanelInfo = new Object() ;
        var geneInfo = new Object() ;
        // canonical allele object for the entry page
        var caAlleles = new Object() ;
        // global for storing source reg docs
        var sourceRegistry = [] ;
        var evidences = [] ;
        var eviDoc ;
        var conf ;
        // stores the individual tab/grid parameters
        var grids = new Object() ;
        // stores the gridnames
        var gridNames = [] ;
        var gridNamesMap = new Object() ;
        // stores info about multiplied grids
        var isPublic ;
        var safeStr = new Object() ;
        // used for entrypage
        var makesaGridForEntryGrid ;
        var alleleSorted = [] ;
        // to get list of canonical alleles based on hgvs term, shows the entry page grid populated with the 
        // query results
        var hgVS;
        var reg ;
        var registerAllele ;
        var subjectsData = new Object() ; 
        //First get the session default variables
       <%= transfertoJs.string %>
        Ext.onReady(function(){
          // Set up tooltip singleton.
          Ext.tip.QuickTipManager.init();
          window.addEventListener('resize', function(event){
              if (Ext.getCmp('gvGrid')) {
                Ext.getCmp('gvGrid').doLayout() ;
              }
            });
          window.addEventListener('resize', function(event){
              if (Ext.getCmp('fullcalc')) {
                Ext.getCmp('fullcalc').doLayout() ;
              }
            });
           window.addEventListener('resize', function(event){
              if (Ext.getCmp('tagAndLinks')) {
                Ext.getCmp('tagAndLinks').doLayout() ;
              }
            });
          // go to the calculator page
          if(ca){ getSourceRegistry(true) ; }
          // show the newly registered allele in the grid
          // If not display error
          else if(hgVS && registerAllele) {
            reg = JSON.parse(regResp) ;
            if('@id' in reg) {
              caAlleles[reg['@id']] = {} ; 
              caAlleles[reg['@id']].CA =  reg['@id'].split("/").pop() ;
              if(Ext.getCmp('gvGrid')) {Ext.getCmp('gvGrid').destroy() ;}
              var hgvsStore = getPropComboStore('hgv','ContextualAllele.properties.Subject.properties.alleleNames.items[0].alleleName.value') ;
            
              alleleSorted = [reg['@id']] ;
              var store = getEntryStore() ;
              store.load() ;
              makeEntryGrid(store) ;
            }
            else 
            {
              var mess = "Failed to register allele using HGVS expression: "+hgVS ;
              if('message' in reg) {mess += '<br> <iSee the details below:</i> <br>' + reg.message ;}
              Ext.Msg.alert('ERROR_ALLELE_REGISTRATION', mess) ;
              console.log('Error in ALLELE REGISTRATION '+hgVS) ;
              console.log(reg) ;
              alleleSorted = [] ;
              var store = getEntryStore() ;
              store.load() ;
              makeEntryGrid(store) ;
            }
          }
          // display the default page with all the alleles in the user evidence source
          else { makeTemplate() ; }
        });

     </script>
  </html>
<%
  end
  rescue => err
      @genMsg = "ERROR"
      @errorMsg += "Encountered an unexpected error"
      @errorMsg += '<br>' 
      @errorMsg += "DETAILS: #{err.message}" +err.backtrace.join("\n")
      @errorState = true
  ensure
    if(@errorState) 
    errorToJs =  StringIO.new
    errorToJs << "var specificError = '#{CGI.escape(@errorMsg)}'; "
    errorToJs << "var genError = '#{@genMsg}'; "
    
%>
    <link rel="stylesheet" type="text/css" href="/javaScripts/ext-4.2.1/resources/css/ext-all.css?jsVer=<%= @context.genbConf.jsVer %>"/> 
    <script type="text/javascript" src="/javaScripts/ext-4.2.1/ext-all.js?jsVer=<%= @context.genbConf.jsVer %>"></script>
     <script type="text/javascript" >
       <%= errorToJs.string %>
        Ext.onReady(function(){
         Ext.Msg.alert(genError, unescape(specificError)) ;
          
        });
    </script>
  <% end
end # begin


%>
